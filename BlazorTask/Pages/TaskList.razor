@inject IToastService toastService

<h3>@Name's Task List</h3>
@if (taskList.Count > 0)
{
    <div class="progress my-2">
        <div class="progress-bar" role="progressbar"
             style="width: @(percentDone)%"
             aria-valuemin="0" aria-valuemax="100">
            @(percentDone)%
        </div>
    </div>
}

<EditForm class="form-inline my-2" Model="@newTask" OnValidSubmit="AddTask">
    <InputText class="form-control mx-2" @bind-Value="newTask.Task" />
    <button class="btn btn-outline-primary" type="submit">Add Task</button>
</EditForm>

<ul class="list-group">
    @foreach (var task in taskList)
    {
        @if (task.IsComplete)
        {
            <li class="list-group-item list-group-item-secondary my-1"
                @onclick="@(() => UnComplete(task))">
                <del>@task.Task</del>
                <span class="float-right delete" @onclick="@(() => DeleteTask(task))"><i class="fas fa-trash"></i></span>
            </li>
        }
        else
        {
            <li class="list-group-item list-group-item-success my-1"
                @onclick="@(() => MarkComplete(task))">
                @task.Task
                <span class="float-right delete" @onclick="@(() => DeleteTask(task))"><i class="fas fa-trash"></i></span>
            </li>
        }

    }
</ul>

@code {
    private List<TaskModel> taskList = new List<TaskModel>();
    private TaskModel newTask = new TaskModel();
    private int percentDone
    {
        get
        {
            return (taskList.Count(x => x.IsComplete) * 100) / taskList.Count;
        }
    }
    [Parameter]
    public string Name { get; set; }

    private void AddTask()
    {
        var isExist = taskList.Any(x => newTask.Task.Equals(x.Task, StringComparison.CurrentCultureIgnoreCase));
        if (isExist)
        {
            toastService.ShowError($"{newTask.Task} already exist");
        }
        else
        {
            taskList.Add(newTask);
            toastService.ShowSuccess(newTask.Task + " add successfully.", "Congratulation");
            newTask = new TaskModel();
        }

    }
    private void MarkComplete(TaskModel task)
    {
        task.IsComplete = !task.IsComplete;
        toastService.ShowSuccess($"{task.Task} Completed!");
    }
    private void UnComplete(TaskModel task)
    {
        task.IsComplete = !task.IsComplete;
        toastService.ShowWarning($"{task.Task} is now incomplete");
    }
    private void DeleteTask(TaskModel task)
    {
        taskList.Remove(task);
        toastService.ShowError($"{task.Task} was deleted");
    }
}